                                            "#!/bin/bash\n",
                                            "yum -y update\n",
                                            "# Create User and add to Docker Group\n",
                                            "adduser jacobc -m  -d /home/jacobc -c \"Jacob Chirayath\"\n",
										    "cp -pr  /home/ec2-user/.ssh /home/jacobc/.ssh\n",
										    "chown -R jacobc:jacobc /home/jacobc/.ssh\n",
											"usermod -aG wheel jacobc\n",
											"usermod -aG docker jacobc\n",
											"usermod -aG docker ec2-user\n",
											"# Install Guacamole\n",
											"docker run --name some-guacd -d guacamole/guacd\n"
											
											"# Check if MySQL DB Exists\n",
											"CheckDB=`mysqlshow  -h $MyDB -uadmin -pMySQL264 | grep guacamole_d ` \n",
											"if [ $? == 1 ]; then\n",
												"# Create the DB\n",
												"echo \“Creating the Guacamole MySQL DB Instance\”\n",
												"docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --mysql > initdb.sql\n",
												"# Get DataBase config file\n",
												"aws s3 cp s3://jchirayath/config/mysqlCreateGuacUser.sql mysqlCreateGuacUser.sql\n",
												"# Execute the DB Connections\n",
												"mysql -h $MyDB -uadmin -pMySQL264 < mysqlCreateGuacUser.sql\n",
												"mysql -h $MyDB -uadmin -pMySQL264 guacamole_db < initdb.sql\n",
											"else\n",
												"echo “DB Exists”\n",
											"fi\n",






       		"ApexRecords" : {
		     "DependsOn":"ApplicationLoadBalancer",
	         "Type" : "AWS::Route53::RecordSetGroup",
	         "Properties" : {
				"HostedZoneId" : {
                        "Ref": "HostedZone"
                 },
				 "RecordSets" : [
						{
						"Name" : "",
						"Type" : "A",
						"AliasTarget" : {
							  "HostedZoneId" : { "Ref": "HostedZone" },
							  "DNSName" : { "Fn::GetAtt" : ["ApplicationLoadBalancer","DNSName"] }
						 }
					}
				]
				}	
			},

	
	
	                       "users" : {
							"myUser" : {
								"groups" : ["wheel", "docker"],
								"homeDir" : "/home/jacobc"
							}
						},

	
     
        "DBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "VPCSecurityGroups" : [
			  {
				"Ref": "VPCSecurityGroup"
			  }
		],
		"DBName": {
                    "Ref": "DBName"
                },
                "Engine": "MySQL",
                "MultiAZ": {
                    "Ref": "MultiAZDatabase"
                },
                "MasterUsername": {
                    "Ref": "DBUser"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "DBInstanceClass": {
                    "Ref": "DBClass"
                },
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "DBSecurityGroups": [
                    {
                        "Ref": "DBSecurityGroup"
                    }
                ],
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c6a2f2e0-8718-4889-ad3e-ab571dcb1e69"
                }
            }
        }
    },
    
            "VPCSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "VPCSecuirtyGroup",
                "GroupDescription": "MyVPC Security Group",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8000",
                        "ToPort": "8000",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8118",
                        "ToPort": "8118",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
		]	
	     }
	},